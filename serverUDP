/*
	LUIS FERNANDO HERNANDEZ SANCHEZ A00815356
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PUERTO 5000

int sockfd;

void aMayusculas(char str[]);

struct node
{
  char address[16];
	char username[31];
	int port;
	struct node *next;
}*head;

void append(char address[16], int port, char username[31])
{
  struct node *temp,*right;
  temp= (struct node *)malloc(sizeof(struct node));
  
  strcpy(temp->address,address);
  temp->address[16]='\0';
  strcpy(temp->username,username);
  temp->username[31]='\0';
  temp->port=port;

  right=(struct node *)head;

  while(right->next != NULL)
	right=right->next;
    right->next =temp;
    right=temp;
    right->next=NULL;
}

void add( char address[16], int port, char username[31])
{
    struct node *temp;
    temp=(struct node *)malloc(sizeof(struct node));

    strcpy(temp->address,address);
    temp->address[16]='\0';
    strcpy(temp->username,username);
    temp->username[31]='\0';
    temp->port=port;

    if (head== NULL)
    {
      head=temp;
      head->next=NULL;
    }
    else
    {
      temp->next=head;
      head=temp;
    }
}

void addafter(char address[16], int port,char username[31], int loc)
{
    int i;
    struct node *temp,*left,*right;
    right=head;
    for(i=1;i<loc;i++)
    {
      left=right;
      right=right->next;
    }
    temp=(struct node *)malloc(sizeof(struct node));

    strcpy(temp->address,address);
    temp->address[16]='\0';
    strcpy(temp->username,username);
    temp->username[31]='\0';
    temp->port=port;

    left->next=temp;
    left=temp;
    left->next=right;
    return;
}

int insert(char address[16], int port, char username[31])
{
    int c=0;
    struct node *temp;
    temp=head;
    if(temp==NULL)
    {
      add(address,port,username);
      return 1;
    }
    else
    {
      while(temp!=NULL)
      {
        if(strcmp(temp->username,username) == 0)
          return 0;
        
        else
        {
          if(temp->address<address)
            c++;
          temp=temp->next;
        }
      }
      if(c==0)
      {
        add(address,port,username);
        return 1;
      }
      else if(c<count())
      {
      addafter(address,port,username,++c);
      return 1;
      }
      else
      {
        append(address,port,username);
        return 1;
      }
    }
}

int delete(int port)
{
    struct node *temp, *prev;
    temp=head;
    while(temp!=NULL)
    {
      if(temp->port==port)
      {
        if(temp==head)
        {
          head=temp->next;
          free(temp);
          return 1;
        }
        else
        {
          prev->next=temp->next;
          free(temp);
          return 1;
        }
      }
      else
      {
        prev=temp;
        temp= temp->next;
      }
    }
    return 0;
}


void  display(struct node *r)
{
  r=head;
  if(r==NULL)
    return;
  
  while(r!=NULL)
  {
    printf("%s/%d-%s ",r->address,r->port,r->username);
    r=r->next;
  }
  printf("\n");
}

int count()
{
  struct node *n;
  int c=0;
  n=head;
  while(n!=NULL)
  {
    n=n->next;
    c++;
  }
  return c;
}

void getUsername(int port,char *username)
{
  struct node *temp;
  temp=head;
  while(temp!=NULL)
  {
    if(temp->port==port)
      strcpy(username,temp->username);
    
    temp= temp->next;
  }
}

int getPort(char username[31])
{
  struct node *temp;
  temp=head;
  while(temp!=NULL)
  {
    if(strcmp(temp->username,username)==0)
      return temp->port;
    
    temp= temp->next;
  }
    return 0;
}

void getAddress(int port,char *address)
{
  struct node *temp;
  temp=head;
  while(temp!=NULL)
  {
    if(temp->port==port)
      strcpy(address,temp->address);
    
    temp= temp->next;
  }
}

void broadcast(char message[80],int port)
{
	struct node *temp;
	temp=head;	
	while(temp!=NULL)
	{
		if(temp->port!=port)
		{
			int numbytes;			
			struct sockaddr_in destino;
			destino.sin_family=AF_INET;
			memset(&(destino.sin_zero), '\0', 8); 			
			destino.sin_port = htons(temp->port); 
			inet_pton(AF_INET,temp->address,&(destino.sin_addr));
			int len= sizeof(struct sockaddr);

			int yes=1;
			if (setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
				perror("setsockopt");
				exit(1);
			} 

			if ((numbytes=sendto(sockfd, message, strlen(message), 0, 
			(struct sockaddr *)&destino, len)) == -1){
			perror("sendto");
			exit(1);
			}
		}

		temp= temp->next;
	}
}


int main(void){
	struct sockaddr_in yo;    
	struct sockaddr_in cliente;
	int addr_len, numbytes;
	
	int port;
	char error1[]="ERROR, USERNAME ALREADY TAKEN";
	char error2[]="ERROR, USERNAME DOESNT EXIST";
	char sent1[]="PRIVATE MESSAGE SENT";
  char sent2[]="MESSAGE SENT";
	
	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		perror("socket");
		exit(1);
	}

	yo.sin_family = AF_INET;         
	yo.sin_port = htons(PUERTO);     
	yo.sin_addr.s_addr = INADDR_ANY; 
	memset(&(yo.sin_zero), '\0', 8); 

	if (bind(sockfd, (struct sockaddr *)&yo, sizeof(struct sockaddr)) == -1) {
		perror("Error en el bind");
		exit(1);
	}

	addr_len = sizeof(struct sockaddr);
	printf("Servidor escuchando en el puerto 5000\n");

	do{
    // Recibir string del cliente
		char buffer[80];
		if ((numbytes=recvfrom(sockfd, buffer, 80-1 , 0, (struct sockaddr *) &cliente, &addr_len)) == -1) {
			perror("Error en el recvfrom");
			exit(1);
		}
		buffer[numbytes] = '\0';
		printf("Recibí de %s/%d: %s\n",inet_ntoa(cliente.sin_addr), ntohs(cliente.sin_port),buffer);
    
    // Procesar string recibido, pasarlo a mayúsculas
		aMayusculas(buffer);
		
		char command[3];
		int c;
		for(c=0; c<2; c++)
		{
			command[c]=buffer[c];
		}
		command[2]='\0';

  //Verifica si es un comando
  //Los comandos empiezan con "-"

  //Verifica si es un username
		if(strcmp(command,"-U") == 0)
		{
			char username[31];
			c=3;
			while (buffer[c]!='\0')
			{
				username[c-3]=buffer[c];
				c++;
			}
			username[c-3]='\0';
			
			if(insert(inet_ntoa(cliente.sin_addr),ntohs(cliente.sin_port),username)==1)
			{
				//BROADCAST-NEWUSER-TODOS				
				char newuser[]="New User: ";
				strcat(newuser,username);
				newuser[strlen(newuser)]='\0';

				broadcast(newuser,ntohs(cliente.sin_port));
				//BROADCAST-NEWUSER-TODOS

				char wellcomeuser[]="Wellcome ";
				strcat(wellcomeuser,username);
				wellcomeuser[strlen(wellcomeuser)]='\0';

				if ((numbytes=sendto(sockfd, wellcomeuser, strlen(wellcomeuser), 0, (struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
					perror("sendto");
					exit(1);
				}
			}
			else
			{
				if ((numbytes=sendto(sockfd, error1, strlen(error1), 0, (struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
					perror("sendto");
					exit(1);
				}
			}
		}
		else
		{	
			if (strcmp(command,"-Q") == 0)
			{
				
				//BROADCAST-GOODBYE-TODOS
				char username[31];
				char leaved[]="User left: ";
				getUsername(ntohs(cliente.sin_port),username);
				strcat(leaved,username);
				leaved[strlen(leaved)]='\0';
				
				broadcast(leaved,ntohs(cliente.sin_port));
				//BROADCAST-GOODBYE-TODOS
				
				char bye[]="Good bye ";
				getUsername(ntohs(cliente.sin_port),username);
				strcat(bye,username);
				bye[strlen(bye)]='\0';
				printf("%s\n",bye);

				if ((numbytes=sendto(sockfd, bye, strlen(bye), 0, 
					(struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
					perror("sendto");
					exit(1);
				}

				//CLOSECONECTION-Q-USER
				if ((numbytes=sendto(sockfd, command, strlen(command), 0, 
					(struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
					perror("sendto");
					exit(1);
				}

				delete(ntohs(cliente.sin_port));
				//CLOSECONECTION-Q-USER
			}
			else
			{	
				if(strcmp(command,"-P") == 0)
				{	
					int espacio;
					char *string=buffer;
					char *blank;
					char PDuser[80];
					char PSuser[80];
					char Pmessage[80];
	
					blank=strchr(string, ' ');
					espacio=(int)(blank-string);

					for(c=2; c<espacio; c++)
					{
						PDuser[c-2]=buffer[c];
					}
					PDuser[c-2]='\0';

					if(getPort(PDuser)!=0)
					{
						int j;
						int k;
						for(j=espacio+1,k=0;j<=strlen(buffer);j++,k++)
						{
							if(j==strlen(buffer))
								Pmessage[k]='\0';
							else
								Pmessage[k]=buffer[j];
						}
					
						getUsername(ntohs(cliente.sin_port),PSuser);
						strcat(PSuser,"~ ");
						PSuser[strlen(PSuser)]='\0';
						strcat(PSuser,Pmessage);
						PSuser[strlen(PSuser)]='\0';

						char address[16];
						getAddress(getPort(PDuser),address);

						int len= sizeof(struct sockaddr);

						struct sockaddr_in destino;
						destino.sin_family=AF_INET;
						destino.sin_port = htons(getPort(PDuser)); 

						memset(&(destino.sin_zero), '\0', 8); 
						inet_pton(AF_INET,address,&(destino.sin_addr));

						int yes=1;
						if (setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
						    perror("setsockopt");
						    exit(1);
						} 

						if ((numbytes=sendto(sockfd, PSuser, strlen(PSuser), 0, 
						(struct sockaddr *)&destino, len)) == -1){
						perror("sendto");
						exit(1);
						}

						if ((numbytes=sendto(sockfd, sent1, strlen(sent1), 0, 
						(struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
						perror("sendto");
						exit(1);
						}
					}
					else
					{
						if ((numbytes=sendto(sockfd, error2, strlen(error2), 0, 
						(struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
						perror("sendto");
						exit(1);
						}
					}
				}
				
				else
				{
					//BROADCAST-MENSAJES-TODOS
					char username[31];
					getUsername(ntohs(cliente.sin_port),username);
					strcat(username,": ");
					username[strlen(username)]='\0';
					strcat(username,buffer);
					username[strlen(username)]='\0';
					printf("%s\n",username);

					broadcast(username,ntohs(cliente.sin_port));
					//BROADCAST-MENSAJES-TODOS

					if ((numbytes=sendto(sockfd, sent2, strlen(sent2), 0, 
					(struct sockaddr *)&cliente, sizeof(struct sockaddr))) == -1){
					perror("sendto");
					exit(1);
					}
				}
			}
		}

	}while(1);
	close(sockfd);
	return 0;
}

void aMayusculas(char str[]){
	int i;
	
	for(i=0; i<strlen(str); i++)
		if (str[i] >= 'a' && str[i] <= 'z')
			str[i] = str[i] - 'a' + 'A';
}
