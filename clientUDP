/*
	LUIS FERNANDO HERNANDEZ SANCHEZ A00815356
*/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define PUERTO 5000    

struct sockaddr_in servidor;

int finish=0;

int newsock;

/*
void *SendUsername(void *threadarg)
{
  int yes=1;
  if (setsockopt(newsock,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
	  perror("setsockopt");
	  exit(1);
	} 

  struct sockaddr_in *server;
	server=(struct sockaddr_in *) threadarg;

	int numbytes;
	char buffer[80];
	// Leer string del teclado
	char commanduser[]="-U ";
	printf("Enter your username(30 chars max): ");
	fgets(buffer, 80, stdin);
	strcat(commanduser,buffer);
	commanduser[strlen(commanduser)-1]='\0';

	if ((numbytes=sendto(newsock, commanduser, strlen(commanduser), 0,
	(struct sockaddr *)server, sizeof(struct sockaddr))) == -1){
	  perror("sendto");
	  exit(1);
	}
	printf("\n");

	pthread_exit(NULL);
}*/

void *SendMessage(void *threadarg)
{
	int yes=1;
	if (setsockopt(newsock,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
	  perror("setsockopt");
	  exit(1);
	} 

	struct sockaddr_in *server;
	server=(struct sockaddr_in *) threadarg;

	while(1)
	{
    int numbytes;
    char buffer[80];
    bzero(buffer,80);
    // Leer string del teclado
    fgets(buffer, 80, stdin);
		buffer[strlen(buffer)-1] = '\0';
		// Mandar string al servidor
		if ((numbytes=sendto(newsock, buffer, strlen(buffer), 0,
		(struct sockaddr *)server, sizeof(struct sockaddr))) == -1){
      perror("sendto");
      exit(1);
		}
		printf("\n");
		if(strcmp(buffer,"-q")==0)
		{
			finish=1;
			pthread_exit(NULL);
			close(newsock);
		}
	}
}

void *ReceiveMessage(void *threadarg)
{
  int yes=1;
  if (setsockopt(newsock,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
    perror("setsockopt");
		exit(1);
	} 	
	struct sockaddr_in *server;
	server=(struct sockaddr_in *) threadarg;
	int addr_len = sizeof(struct sockaddr);

	while(1)
	{	
		int numbytes=0;
		char buffer[80];
		bzero(buffer,80);
		// Recibir string modificado (en mayÃºsculas) del servidor
		if ((numbytes=recvfrom(newsock, buffer, 80-1 , 0, (struct sockaddr *) server, &addr_len)) == -1) {
			perror("Error en el recvfrom");
			exit(1);
		}
		buffer[numbytes] = '\0';
		printf("%s \n", buffer);
	}
}

int main(int argc, char *argv[]){
	struct hostent *he;
	pthread_t send;
	pthread_t receive;
	int rc1, rc2;

	if ((newsock = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		perror("socket");
		exit(1);
	}


	if (argc != 2) {
		fprintf(stderr,"uso: clienteUDP dirIPServidor\n");
		exit(1);
	}

	if ((he=gethostbyname(argv[1])) == NULL) {
		perror("gethostbyname");
		exit(1);
	}

	servidor.sin_family = AF_INET;     
	servidor.sin_port = htons(PUERTO); 
	servidor.sin_addr = *((struct in_addr *)he->h_addr);
	memset(&(servidor.sin_zero), '\0', 8); 

	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

	rc2 = pthread_create(&receive, &attr, ReceiveMessage, (void *) &servidor);
	if (rc2){
		printf("ERROR; return code from pthread_create() is %d\n", rc2);
		exit(-1);
	}


	rc1 = pthread_create(&send, &attr, SendMessage, (void *) &servidor);
	if (rc1){
		printf("ERROR; return code from pthread_create() is %d\n", rc1);
		exit(-1);
	}
  while (!finish);
	return 0;
} 
